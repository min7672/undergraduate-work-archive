#include<iostream>
#include<vector>
#define INF 987654321
using namespace std;

class RouteInfo{
    char node;
    int cost;
    char prenode;
public:
    RouteInfo(){}
    RouteInfo(char node, int cost = INF, char prenode = ' ');
    void setInfo(char node, int cost, char prenode);
    void setInfo(int cost,char prenode);
    char getNode(){return node;}
    int getCost(){return cost;}
    char getPreNode(){return prenode;}
};

class RoutingToLink{
    int a[7][7];
    RouteInfo *e;
    vector<RouteInfo> nodelist;
    void routinglinkForleastCost(char start);
public:
    RoutingToLink(int a[7][7]);
    void startFirst(char start);
    void showReverse();
};

RouteInfo::RouteInfo(char node, int cost, char prenode){
        this->node = node;
        this->cost =cost;
        this->prenode=prenode;
}
void RouteInfo::setInfo(int cost,char prenode){
        this->cost = cost;
        this->prenode= prenode;
}
void RouteInfo::setInfo(char node, int cost, char prenode){
        this->node = node;
        this->cost =cost;
        this->prenode=prenode;
}

RoutingToLink::RoutingToLink(int a[7][7]){
    for(int i= 0;i<7;i++){
        for(int j= 0;j<7;j++){
                this->a[i][j] = a[i][j];
        }
    }
    int size = sizeof(*a)/4;
    e =  new RouteInfo[size];
    for(int i = 0; i< size;i++){
        e[i].setInfo(i+65,INF,' ');
        nodelist.push_back(e[i]);
    }
}
void RoutingToLink::startFirst(char start){
    for(int i =0;i<nodelist.size();i++){
        if(nodelist[i].getNode() == start)
            nodelist[i].setInfo(0,'e'); //end 약자로 쓴다
    }
    routinglinkForleastCost(start);
}
void RoutingToLink::routinglinkForleastCost(char start){
        int tmp[7];
        for(int i = 0; i<7;i++){
            tmp[i] =a[start-65][i];
        }
        int index;
        int tmpCost;
        char tmpPrenode;
        for(index =0;index<nodelist.size();index++){
            if(nodelist[index].getNode() == start){
                tmpCost=nodelist[index].getCost();
                tmpPrenode = nodelist[index].getPreNode();
            }
        }

        tmp[start-65] = 0;
        if(tmpPrenode != ' ')
            tmp[tmpPrenode-65] = 0;
        for(int i = 0; i<sizeof(tmp)/4;i++){
            if( tmp[i]!=0 & (tmpCost+tmp[i] < nodelist[i].getCost())){
                    nodelist[i].setInfo(tmpCost+tmp[i],start);
                    routinglinkForleastCost(i+65);
            }
            else
                continue;
        }
        return;
}
void RoutingToLink::showReverse(){
        for(int i = 0; i<7;i++){
            cout<<i << "\t"<<nodelist[i].getNode()<< "\t" << nodelist[i].getCost();

            for(char deliminater = nodelist[i].getPreNode();deliminater != 'e';deliminater = nodelist[deliminater-65].getPreNode())
                cout<< "\t"<< deliminater;
            cout<< endl;
        }
 }

int main(){
    int a[7][7]={
            {0,2,0,3,0,0,0},
            {2,0,5,0,4,0,0},
            {0,5,0,0,0,4,3},
            {3,0,0,0,5,0,0},
            {0,4,0,5,0,2,0},
            {0,0,4,0,2,0,1},
            {0,0,3,0,0,1,0}
    };

    RoutingToLink test = RoutingToLink(a);
    test.startFirst('C');
    test.showReverse();
}

 